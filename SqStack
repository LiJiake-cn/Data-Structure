// InitStack(&S)：初始化栈。构造一个空栈 S，分配内存空间。
// DestroyStack(&S)：销毁栈。销毁并释放栈 S 所占用的内存空间。
// Push(&S,x)：进栈，若栈S未满，则将x加入使之成为新栈顶。
// Pop(&S,&x)：出栈，若栈S非空，则弹出栈顶元素，并用x返回。
// GetTop(S, &x)：读栈顶元素。若栈 S 非空，则用 x 返回栈顶元素
// StackEmpty(S)：判断一个栈 S 是否为空。若S为空，则返回true，否则返回false
#include<stdio.h>
#include<stdlib.h>
#define MaxSize 10;//定义栈中元素的最大个数
typedef char ElemType;
typedef struct 
{
    ElemType data[MaxSize];//静态数组存放栈中元素
    int top;//栈顶指针
}SqStack;

//初始化操作，初始化时top=-1或者top=0，当top=0时，栈满条件为top=MaxSize
bool InitStack(SqStack &S)
{
    S.top=-1;//初始化栈顶指针
}

//进栈操作
bool Push(SqStack &S,ElemType x)
{
    if(S.top==MaxSize-1){
        return false;
    }
    S.top=S.top+1;//指针先加1
    S.data[S.top]=x;//新元素入栈
    //等价于S.data[++S.top]=x;
    return true;
}

//出栈操作
bool Pop(SqStack &S,ElemType &x)
{
    if(S.top==-1){
        return false;
    }
    x=S.data[S.top];//栈顶元素先出栈
    S.top=S.top-1;//指针再减1
    //等价于x=S.data[S.top--];
    return true;
}

//读取栈顶元素操作
bool GetTop(SqStack S,ElemType &x)
{
    if(S.top==-1){
        return false;
    }
    x=S.data[S.top];//x记录栈顶元素
    return true;
}

//判空
bool StackEmpty(SqStack S)
{
    if(S.top==-1){
        return true;
    }else{
        return false;
    }
}

void testStack()
{
    SqStack S;//声明一个顺序栈（分配空间）
    InitStack(S);
}
//都是O（1）的时间复杂度
