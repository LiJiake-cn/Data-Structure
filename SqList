//线性表的基本操作(顺序表)
// InitList(&L)：初始化表。构造一个空的线性表L，分配内存空间。
// ListInsert(&L,i,e)：插入操作。在表L中的第i个位置上插入指定元素e。
// ListDelete(&L,i,&e)：删除操作。删除表L中第i个位置的元素，并用e返回删除元素的值。
// LocateElem(L,e)：按值查找操作。在表L中查找具有给定关键字值的元素。
// GetElem(L,i)：按位查找操作。获取表L中第i个位置的元素的值。
// Length(L)：求表长。返回线性表L的长度，即L中数据元素的个数。
// PrintList(L)：输出操作。按前后顺序输出线性表L的所有元素值。
// DestroyList(&L)：销毁操作。销毁线性表，并释放线性表L所占用的内存空间。
// Empty(L)：判空操作。若L为空表，输出L为空。

#include<stdio.h>
#include<stdlib.h>
#define MaxSize 10 //定义最大长度
typedef struct 
{
    int data[MaxSize];//用静态数组存放数据元素
    int length;//顺序表当前长度
}SqList;//顺序表的类型定义

//顺序表的基本操作——初始化一个顺序表
void InitList(SqList &L){
    for(int i=0;i<MaxSize;i++){
        L.data[i]=0;//将所有数据元素设置为默认初始值
    }
    L.length=0;//顺序表初始长度为0
}

// //定义一个动态数组的头文件以及定义，增加其长度
// #include<stdio.h>
// #include<stdlib.h>
// #define InitSize 10//设置默认最大长度
// typedef struct{
//     int *data;//定义动态分配数组的指针
//     int MaxSize;//顺序表当前最大容量
//     int length;//顺序表当前长度
// }SqList;
// void InitList(SqList &L){
//     L.data=(int*)malloc(InitSize*sizeof(int));//用malloc申请一片连续的存储空间
//     L.length=0;
//     L.MaxSize=InitSize;
// }
// void IncreaseSize(SqList &L,int len)
// {
//     int *p=L.data;
//     L.data=(int*)malloc((L.MaxSize+len)*sizeof(int));
//     for(int i=0;i<L.length;i++){
//         L.data[i]=p[i];
//     }
//     L.MaxSize=L.MaxSize+len;
//     free(p);
// }

//顺序表的基本操作——插入
bool ListInsert(SqList &L,int i,int e)
{
    if(i<1||i>L.length+1){//判断i的范围是否合法
        return false;
    }
    if(L.length>=MaxSize){//判断存储空间是否已满
        return false;
    }
    for(int j=L.length;j>=i;j--){
        L.data[j]=L.data[j-1];//将第i个位置的元素往后移
    }
    L.data[i-1]=e;//在第i的位置放入e
    L.length++;//长度加1
    return true;
}

//顺序表的基本操作——删除
bool ListDelete(SqList &L,int i,int &e)
{
    if(i<1||i>=L.length){
        return false;
    }
    e=L.data[i-1];
    for(int j=i;j<L.length;j++){
        L.data[j-1]=L.data[j];
    }
    L.length--;
    return true;
}

//顺序表的基本操作——按位查找
int GetElem(SqList L,int i)
{
    if(i>1||i<L.length+1){
        return L.data[i-1];
    }else{
        return 0;
    }
}

//顺序表的基本操作——按值查找
int LocatElem(SqList L,int e)
{
    for(int i=0;i<L.length;i++){
        if(L.data[i]==e){
            return i+1;
        }
    }
    return 0;
}

//顺序表的基本操作——求表长
int Length(SqList L)
{
    return L.length;
}

//顺序表的基本操作——输出
int PrintList(SqList L)
{
    if(L.length>0){
        printf("Elements in the sequential table include :");
    }else{
        return 0;
    }
    for(int i=0;i<L.length;i++){
        printf("%d ",L.data[i]);
    }

}

//顺序表的基本擦做——销毁
void DestroyList(SqList &L)
{
    for(int i;i<L.length;i++){
        L.data[i]=NULL;
    }
    L.length=0;
    free(L.data);
}
//顺序表的基本操作——判空
void Empty(SqList L){
    if(L.data==0){
        printf("The sequential table is empty");
    }else{
        printf("The sequential table is not empty");
    }
}
//主函数
int main()
{
    SqList L;//声明主函数
    InitList(L);//初始化顺序表
    int i,e;//i代表位置，e代表元素

    //插入平均时间复杂度O(n)
    if(ListInsert(L,i, e)){
        printf("The %d position is successfully inserted, and the inserted element is %d /n",i,e);
    }else{
        printf("Insertion failed/n");
    }
    
    //删除平均时间复杂度O（n）
    if(ListDelete(L,i,e)){
        printf("The %d position is successfully deletion, and the deletion element is %d /n",i,e);
    }else{
        printf("Deletion failed/n");   
    }
   
    //按位查找的时间复杂度O（1）
    if(GetElem(L,i)){
        printf("In the %d position is %d",i,GetElem(L,i));
    }else{
        printf("Lookup failed");
    }

    //按值查找的时间复杂度O（n）
    if(LocatElem(L,e)){
        printf("%d is in position %d",LocatElem(L,e));
    }else{
        printf("Lookup failed");
    }

    //求表长
    printf("The length of the sequential table is %d /n",Length(L));
    //输出顺序表
    PrintList(L);
    //销毁顺序表
    DestroyList(L);
    //判空
    Empty(L);

    return 0;
}

