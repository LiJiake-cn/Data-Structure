//队列的链式实现
#include<stdio.h>
#include<stdlib.h>
typedef int ElemType;
typedef struct LinkNode
{
    ElemType data;
    struct LinkNode *next;
}LinkNode;

typedef struct 
{
    LinkNode *front,*rear;//队列的队头和队尾指针
}LinkQueue;

//初始化(带头结点)
void InitQueue(LinkQueue &Q)//初始化时，front，rear都指向头结点
{
    Q.front=Q.rear=(LinkNode*)malloc(sizeof(LinkNode));
    Q.front->next=NULL;
}
//初始化（不带头结点）
void InitQueue(LinkQueue &Q)
{
    Q.front=NULL;
    Q.rear=NULL;
}

//判断队列是否为空(带头结点)
bool IsEmpty(LinkQueue Q)
{
    if(Q.front==Q.rear){
        return true;
    }else{
        return false;
    }
}
//判断队列是否为空(不带头结点)
bool IsEmpty(LinkQueue &Q)
{
    if(Q.front==NULL){
        return true;
    }else{
        return false;
    }
}

//入队（带头结点）
void EnQueue(LinkQueue &Q,ElemType x)
{
    LinkNode *s=(LinkNode*)malloc(sizeof(LinkNode));
    s->data=x;
    s->next=NULL;
    Q.rear->next=s;//新节点插入到rear之后
    Q.rear=s;//表尾指针移动到新的表尾s
}
//入队（不带头结点）
void EnQueue(LinkQueue &Q,ElemType x)
{
    LinkNode *s=(LinkNode*)malloc(sizeof(LinkNode));
    s->data=x;
    s->next=NULL;
    if(Q.front==NULL){//在空队列中插入第一个元素
        Q.front=s;//修改队头队尾指针
        Q.rear=s;//不带头结点的指针，第一个元素入队时要特殊处理
    }else{
        Q.rear->next=s;
        Q.rear=s;
    }
}

//出队（带头结点）
bool DeQueue(LinkQueue &Q,ElemType &x)
{
    if(Q.front==Q.rear){
        return false;//空队
    }
    LinkNode *p=Q.front->next;
    x=p->data;//用变量x返回队头元素
    Q.front->next=p->next;//修改结点的nest指针
    if(Q.rear==p){//最后一个结点出队
        Q.rear=Q.front;//修改rear指针
    }
    free(p);
    return true;
}
//出队（不带头结点）
bool DeQueue(LinkQueue &Q,ElemType &x)
{
    if(Q.front==NULL){
        return false;//空队
    }
    LinkNode *p=Q.front;//p指向此次出队的结点
    x=p->data;//用变量x返回队头元素
    Q.front=p->next;//修改front指针
    if(Q.rear==p){//最后一个结点出队
        Q.front=NULL;
        Q.rear=NULL;
    }
    free(p);
    return true;
}

//主函数......
